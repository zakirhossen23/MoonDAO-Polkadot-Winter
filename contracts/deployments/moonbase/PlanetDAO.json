{
  "address": "0xda617B5ee0Bc3DcE5239089140D2816F62C0C327",
  "abi": [
    {
      "inputs": [],
      "name": "_dao_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_donations_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feed_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feed_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_goal_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_goal_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "goal_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_vote_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_join_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_joined_person",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "daoid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_read_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reply_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_smart_contract_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_smart_contracts_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smart_contract_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "smart_contract_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_template_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_user_badges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dao",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "joined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "goal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ideas",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "donation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "comment",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reply",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feed_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        }
      ],
      "name": "add_Feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed2",
          "type": "string"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sender",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_read_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_replies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reply_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_smart_contracts",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        }
      ],
      "name": "getMsgIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "getReadMsg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        }
      ],
      "name": "getReplyIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        }
      ],
      "name": "is_person_joined",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dao_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "join_community",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sender",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        }
      ],
      "name": "sendMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wallet",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "sendReadMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reply",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        }
      ],
      "name": "sendReply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        }
      ],
      "name": "update_template",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f71a23d9cb3b2f53d269908ae24bcd9aed9ac3d96f58b3a8d304c0f715a1481",
  "receipt": {
    "to": null,
    "from": "0x610Cd980BeF747451152e8F0fF16A19A451F7a43",
    "contractAddress": "0xda617B5ee0Bc3DcE5239089140D2816F62C0C327",
    "transactionIndex": 0,
    "gasUsed": "6612522",
    "logsBloom": "0x
    "blockHash": "0x4b4570f5e1f02368c179f56b3ad88243582f9c2d30725659da8d07648e7a86ca",
    "transactionHash": "0x3f71a23d9cb3b2f53d269908ae24bcd9aed9ac3d96f58b3a8d304c0f715a1481",
    "logs": [],
    "blockNumber": 5790271,
    "cumulativeGasUsed": "6612522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3319141801287280d6a8ffac813a30c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_dao_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_donations_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feed_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goal_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_goal_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_vote_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_join_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_joined_person\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_read_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reply_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_smart_contract_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_smart_contracts_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smart_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"smart_contract_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_template_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_user_badges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dao\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"goal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ideas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"donation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"comment\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reply\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feed_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"add_Feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed2\",\"type\":\"string\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_read_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_replies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reply_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_smart_contracts\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"}],\"name\":\"getMsgIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"getReadMsg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"}],\"name\":\"getReplyIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"}],\"name\":\"is_person_joined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dao_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"join_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sender\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"sendMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"sendReadMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reply\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"}],\"name\":\"sendReply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"}],\"name\":\"update_template\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlanetDAO.sol\":\"PlanetDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/PlanetDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract PlanetDAO {\\r\\n    struct dao_uri_struct {\\r\\n        string dao_wallet;\\r\\n        string dao_uri;\\r\\n        string finished;\\r\\n    }\\r\\n    struct goal_uri_struct {\\r\\n        string dao_id;\\r\\n        string goal_uri;\\r\\n    }\\r\\n\\r\\n    struct ideas_uri_struct {\\r\\n        uint256 goal_id;\\r\\n        string ideas_uri;\\r\\n        uint256 donation;\\r\\n    }\\r\\n\\r\\n    struct donation_struct {\\r\\n        uint256 ideas_id;\\r\\n        uint256 userid;\\r\\n        uint256 donation;\\r\\n    }\\r\\n\\r\\n    struct smart_contract_uri_struct {\\r\\n        uint256 smart_contract_id;\\r\\n        uint256 ideas_id;\\r\\n        string smart_contract_uri;\\r\\n    }\\r\\n    struct goal_ideas_votes_struct {\\r\\n        uint256 goal_id;\\r\\n        uint256 ideas_id;\\r\\n        uint256 user_id;\\r\\n    }\\r\\n    struct message_struct {\\r\\n        uint256 message_id;\\r\\n        uint256 ideas_id;\\r\\n        string message;\\r\\n        string sender;\\r\\n    }\\r\\n    struct message_read_struct {\\r\\n        uint256 message_id;\\r\\n        uint256 ideas_id;\\r\\n        uint256 user_id;\\r\\n        string msg_type;\\r\\n    }\\r\\n    struct reply_struct {\\r\\n        uint256 reply_id;\\r\\n        uint256 message_id;\\r\\n        uint256 ideas_id;\\r\\n        string message;\\r\\n    }\\r\\n\\r\\n    struct UnbondingRequest {\\r\\n        int64 completionTime;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct join_struct {\\r\\n        uint256 daoid;\\r\\n        uint256 user_id;\\r\\n    }\\r\\n\\r\\n    struct user_badge_struct {\\r\\n        uint256 user_id;\\r\\n        bool dao;\\r\\n        bool joined;\\r\\n        bool goal;\\r\\n        bool ideas;\\r\\n        bool vote;\\r\\n        bool donation;\\r\\n        bool comment;\\r\\n        bool reply;\\r\\n    }\\r\\n    \\r\\n    struct feed_struct {\\r\\n        uint256 feed_id;\\r\\n        uint256 date;\\r\\n        string Type;\\r\\n        string data;\\r\\n    }\\r\\n    uint256 public _dao_ids;\\r\\n    uint256 public _donations_ids;\\r\\n    uint256 public _goal_ids;\\r\\n    uint256 public _ideas_ids;\\r\\n    uint256 public _join_ids;\\r\\n    uint256 public _smart_contract_ids;\\r\\n    uint256 public _ideas_vote_ids;\\r\\n    uint256 public _message_ids;\\r\\n    uint256 public _message_read_ids;\\r\\n    uint256 public _reply_ids;\\r\\n    uint256 public _feed_ids;\\r\\n    mapping(uint256 => dao_uri_struct) public _dao_uris; //_dao_ids              => (Dao)                    Dao Wallet + Dao URI   + Finished\\r\\n    mapping(uint256 => string) public _template_uris; //_dao_ids              => (Dao)                   Template HTML Code\\r\\n    mapping(uint256 => join_struct) public _joined_person; //_join_ids             => (Dao)                  join_struct\\r\\n\\r\\n    mapping(uint256 => goal_uri_struct) public _goal_uris; //_goal_ids             => (Goal)                   Dao ID + Goal URI\\r\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris; //_ideas_ids            => (Ideas)                  Goal ID + Ideas URI\\r\\n    mapping(uint256 => uint256) public _donated; //uint256            => (Donated to ideas)                amount\\r\\n    mapping(uint256 => feed_struct) public _feeds; //_feed_ids            => (feed_struct)\\r\\n    mapping(uint256 => donation_struct) public _donations; //uint256            => donation_struct\\r\\n    mapping(uint256 => smart_contract_uri_struct) public _smart_contracts_uris; //_smart_contract_ids   => (Ideas Smart contract)   Goal ID + Ideas URI\\r\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes; //_ideas_vote_ids       => (Vote)                   Goal ID + Ideas ID + User Id\\r\\n\\r\\n    mapping(uint256 => message_struct) public all_messages; // all_messages        => _message_ids + message_struct\\r\\n\\r\\n    mapping(uint256 => message_read_struct) public all_read_messages; // all_read_messages        => _message_read_ids + message_read_struct\\r\\n\\r\\n    mapping(uint256 => reply_struct) public all_replies; // all_messages        => _reply_ids + reply_struct\\r\\n    mapping(uint256 => user_badge_struct) public _user_badges; //user_id            => user_badge_struct\\r\\n\\r\\n    //Daos\\r\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri, string memory _template,uint256 user_id) public returns (uint256) {\\r\\n        //Create Dao into _dao_uris\\r\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, 'False');\\r\\n        _template_uris[_dao_ids] = _template;\\r\\n        _user_badges[user_id].dao = true;\\r\\n        _dao_ids++;\\r\\n\\r\\n        return _dao_ids;\\r\\n    }\\r\\n\\r\\n    function update_template(uint256 _dao_id, string memory _template) public {\\r\\n        _template_uris[_dao_id] = _template;\\r\\n    }\\r\\n\\r\\n    function set_dao(uint256 _dao_id, string memory _dao_wallet, string memory _dao_uri) public {\\r\\n        //Set Dao of wallet and uri\\r\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_daos() public view returns (string[] memory) {\\r\\n        //Getting all doas\\r\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n        //Getting one dao URI\\r\\n        return _dao_uris[_dao_id].dao_uri;\\r\\n    }\\r\\n\\r\\n    function add_Feed(string memory feed_text,string memory _type) public {\\r\\n         _feeds[_feed_ids] = feed_struct(_feed_ids,block.timestamp,_type,feed_text);\\r\\n         _feed_ids++;\\r\\n    }\\r\\n\\r\\n    //Goals\\r\\n    function create_goal(string memory _goal_uri, string memory  _dao_id,uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n        //Create goal into _goal_uris\\r\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n       \\r\\n        _user_badges[_user_id].goal = true;\\r\\n        _goal_ids++;\\r\\n        add_Feed(_feed,\\\"goal\\\");\\r\\n\\r\\n        return _goal_ids;\\r\\n    }\\r\\n\\r\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n        //Set goal uri\\r\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_goals() public view returns (string[] memory) {\\r\\n        //Getting all goals\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_goals_by_dao_id(string memory _dao_id) public view returns (string[] memory) {\\r\\n        //Getting all goals by dao id\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            if (keccak256(bytes(_goal_uris[i].dao_id)) == keccak256(bytes(_dao_id))) {\\r\\n                _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n                _store_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n        //Getting goal id by uri\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n        //Getting one goal URI\\r\\n        return _goal_uris[_goal_id].goal_uri;\\r\\n    }\\r\\n\\r\\n    //Ideas\\r\\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id, string[] memory _smart_contracts,uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n        //Create ideas into _ideas_uris\\r\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri, 0);\\r\\n        _user_badges[_user_id].ideas = true;\\r\\n        _ideas_ids++;\\r\\n\\r\\n        for (uint256 i = 0; i < _smart_contracts.length; i++) {\\r\\n            create_ideas_smart_contract(_ideas_ids, _smart_contract_ids, _smart_contracts[i]);\\r\\n            _smart_contract_ids++;\\r\\n        }\\r\\n        add_Feed(_feed,\\\"idea\\\");\\r\\n\\r\\n        return _ideas_ids;\\r\\n    }\\r\\n\\r\\n    function create_ideas_smart_contract(uint256 _ideas_id, uint256 _smart_contract_id, string memory _smart_contract) private {\\r\\n        _smart_contracts_uris[_smart_contract_id] = smart_contract_uri_struct(_ideas_id, _smart_contract_id, _smart_contract);\\r\\n    }\\r\\n\\r\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n    }\\r\\n\\r\\n    function add_donation(uint256 _ideas_id, uint256 _doantion,  uint256 _userid, string memory _feed1, string memory _feed2) public {\\r\\n      if (_user_badges[_userid].donation == false){\\r\\n        add_Feed(_feed1,\\\"badge\\\");\\r\\n      }\\r\\n      add_Feed(_feed2,\\\"donation\\\");\\r\\n      \\r\\n      _user_badges[_userid].donation = true;\\r\\n        _ideas_uris[_ideas_id].donation += _doantion;\\r\\n        _donated[_userid] += _doantion;\\r\\n        _donations[_donations_ids] = donation_struct(_ideas_id, _userid, _doantion);\\r\\n        _donations_ids++;\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    function join_community(uint256 dao_id, uint256 person, string memory _feed) public {\\r\\n        _user_badges[person].joined = true;\\r\\n        _joined_person[_join_ids] = join_struct({daoid: dao_id, user_id: person});\\r\\n        _join_ids++;\\r\\n         add_Feed(_feed,\\\"join\\\");\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function is_person_joined( uint256 person) public view returns (bool) {\\r\\n \\r\\n        for (uint256 i = 0; i < _join_ids; i++) {\\r\\n            if (_joined_person[i].user_id == person) return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas() public view returns (string[] memory) {\\r\\n        //Getting all ideas\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\r\\n        //Getting all ideas by goal id\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (_ideas_uris[i].goal_id == _goal_id) _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n            _store_id++;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return _ideas_uris[i].goal_id;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n        //Getting one ideas URI\\r\\n        return _ideas_uris[_ideas_id].ideas_uri;\\r\\n    }\\r\\n\\r\\n    //Votes\\r\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n         _user_badges[_user_id].vote = true;\\r\\n        //Create votes into all_goal_ideas_votes\\r\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id, _user_id);\\r\\n        _ideas_vote_ids++;\\r\\n        add_Feed(_feed,\\\"vote\\\");\\r\\n\\r\\n        return _ideas_vote_ids;\\r\\n    }\\r\\n\\r\\n    function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (uint256[] memory ) {\\r\\n        //gets all ideas votes from goal\\r\\n        uint256[] memory _StoreInfo = new uint256[](_ideas_vote_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n            if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id) _StoreInfo[_store_id] = all_goal_ideas_votes[i].user_id;\\r\\n            _store_id++;\\r\\n        }\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    //Messages\\r\\n    function sendMsg(uint256 _ideas_id, string memory _message, string memory _sender, uint256 _user_id) public returns (uint256) {\\r\\n            _user_badges[_user_id].comment = true;\\r\\n        //Create messsage into all_messages\\r\\n        all_messages[_message_ids] = message_struct(_message_ids, _ideas_id, _message, _sender);\\r\\n        _message_ids++;\\r\\n\\r\\n        return _message_ids;\\r\\n    }\\r\\n\\r\\n    function getMsgIDs(uint256 ideas_id) public view returns (uint256[] memory) {\\r\\n        //Getting all messages ids by idea id\\r\\n        uint256[] memory _All_Ideas_Messages = new uint256[](_message_ids);\\r\\n        uint256 _msg_id;\\r\\n        for (uint256 i = 0; i < _message_ids; i++) {\\r\\n            if (all_messages[i].ideas_id == ideas_id) {\\r\\n                _All_Ideas_Messages[_msg_id] = all_messages[i].message_id;\\r\\n                _msg_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _All_Ideas_Messages;\\r\\n    }\\r\\n\\r\\n    function sendReply(uint256 _message_id, string memory _reply,uint256 ideas_id,uint256 _userid) public returns (uint256) {\\r\\n          _user_badges[_userid].reply = true;\\r\\n        //Create reply into all_replies\\r\\n        all_replies[_reply_ids] = reply_struct(_reply_ids, _message_id,ideas_id, _reply);\\r\\n        _reply_ids++;\\r\\n\\r\\n        return _reply_ids;\\r\\n    }\\r\\n\\r\\n    function getReplyIDs(uint256 message_id) public view returns (uint256[] memory) {\\r\\n        //Getting all messages ids by idea id\\r\\n        uint256[] memory _All_Messages_Replys = new uint256[](_reply_ids);\\r\\n        uint256 _reply_id;\\r\\n        for (uint256 i = 0; i < _reply_ids; i++) {\\r\\n            if (all_replies[i].message_id == message_id) {\\r\\n                _All_Messages_Replys[_reply_id] = all_replies[i].reply_id;\\r\\n                _reply_id++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _All_Messages_Replys;\\r\\n    }\\r\\n\\r\\n    function sendReadMsg(uint256 _message_id, uint256 _ideas_id,uint256 _wallet, string memory msg_type) public returns (uint256) {\\r\\n        //Create messsage into all_messages\\r\\n        all_read_messages[_message_read_ids] = message_read_struct(_message_id, _ideas_id, _wallet,msg_type);\\r\\n        _message_read_ids++;\\r\\n\\r\\n        return _message_read_ids;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  function getReadMsg(uint256 _message_id, string memory msg_type)  public view returns (bool) {\\r\\n       \\r\\n       bool read = false;\\r\\n        for (uint256 i = 0; i < _message_read_ids; i++) {\\r\\n            if (all_read_messages[i].message_id == _message_id && keccak256(bytes(msg_type)) == keccak256(bytes(all_read_messages[i].msg_type))) {\\r\\n               read = true; \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return read;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function reset_all() public {\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) delete _dao_uris[i];\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) delete _goal_uris[i];\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) delete _ideas_uris[i];\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) delete _smart_contracts_uris[i];\\r\\n        for (uint256 i = 0; i < _message_ids; i++) delete all_messages[i];\\r\\n        for (uint256 i = 0; i < _reply_ids; i++) delete all_replies[i];\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) delete all_goal_ideas_votes[i];\\r\\n        _dao_ids = 0;\\r\\n        _goal_ids = 0;\\r\\n        _ideas_ids = 0;\\r\\n        _message_ids = 0;\\r\\n        _reply_ids = 0;\\r\\n        _ideas_vote_ids = 0;\\r\\n    }\\r\\n\\r\\n   \\r\\n}\\r\\n\",\"keccak256\":\"0xb26fdb300b35d6201e858c10834745c9c8d21b260bd5b309bbd2b62ee036ef6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614623806100206000396000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80638ac4110c116101d3578063bda0033511610104578063cd230809116100a2578063e1b011a01161007c578063e1b011a014610bbf578063e32acc1a14610bef578063ec24580214610c1f578063ff4a37ef14610c3d57610378565b8063cd23080914610b41578063d3791b2014610b71578063d9fc52db14610b8f57610378565b8063c29595c5116100de578063c29595c514610aa4578063c7af4ee514610ac0578063ca013f1714610af0578063cace8d4614610b0e57610378565b8063bda0033514610a4e578063c04e743014610a6a578063c04fe97814610a8657610378565b8063a1ca917811610171578063aa4cdf2a1161014b578063aa4cdf2a146109b1578063b16060a6146109e1578063b39a38bd146109eb578063b527d45e14610a1b57610378565b8063a1ca91781461092b578063a428a47f1461095b578063aa2bf5d31461099357610378565b80638d6b30a1116101ad5780638d6b30a11461088f5780639077007d146108bf578063934c5f00146108dd57806397ee76061461090d57610378565b80638ac4110c146108255780638c70034a146108435780638d3d25951461085f57610378565b80634be7adb5116102ad5780637f2035d41161024b578063812fae1f11610225578063812fae1f1461078d57806386ffa45b146107bd57806387633eb2146107ed578063881de8581461080957610378565b80637f2035d4146106fa5780637fc543ec1461072b578063803f5b9f1461075d57610378565b80635d907da1116102875780635d907da11461064c5780636ecda4ee1461067c578063787f19c7146106ac5780637bbd582d146106dc57610378565b80634be7adb5146105cd57806354a9fb18146105fd5780635996278f1461063057610378565b806320959ed01161031a578063330b8f26116102f4578063330b8f26146105195780633f87a2f41461054a578063468d0c801461057d5780634a797bd7146105af57610378565b806320959ed01461049957806327a568b9146104c957806329b56f60146104fb57610378565b806313bf4cea1161035657806313bf4cea146103fb5780631b592aeb146104195780631ba44c4c146104375780631e9ac9f51461046957610378565b80630377d44a1461037d5780631171b621146103ad578063131d44f2146103cb575b600080fd5b610397600480360381019061039291906133a4565b610c6f565b6040516103a4919061352e565b60405180910390f35b6103b5610df9565b6040516103c29190613569565b60405180910390f35b6103e560048036038101906103e091906135b0565b610dff565b6040516103f2919061352e565b60405180910390f35b610403610f6e565b6040516104109190613569565b60405180910390f35b610421610f74565b60405161042e9190613569565b60405180910390f35b610451600480360381019061044c91906135b0565b610f7a565b604051610460939291906135dd565b60405180910390f35b610483600480360381019061047e91906133a4565b610fa4565b6040516104909190613569565b60405180910390f35b6104b360048036038101906104ae91906135b0565b611015565b6040516104c09190613569565b60405180910390f35b6104e360048036038101906104de91906135b0565b61102d565b6040516104f29392919061365e565b60405180910390f35b6105036111ef565b604051610510919061352e565b60405180910390f35b610533600480360381019061052e91906135b0565b61132a565b6040516105419291906136aa565b60405180910390f35b610564600480360381019061055f91906135b0565b61134e565b60405161057494939291906136d3565b60405180910390f35b610597600480360381019061059291906135b0565b611406565b6040516105a69392919061371f565b60405180910390f35b6105b76114b8565b6040516105c49190613569565b60405180910390f35b6105e760048036038101906105e2919061375d565b6114be565b6040516105f4919061385b565b60405180910390f35b610617600480360381019061061291906135b0565b6115c4565b604051610627949392919061387d565b60405180910390f35b61064a600480360381019061064591906138d0565b611704565b005b610666600480360381019061066191906135b0565b6118a8565b6040516106739190613983565b60405180910390f35b610696600480360381019061069191906135b0565b611950565b6040516106a39190613983565b60405180910390f35b6106c660048036038101906106c191906139a5565b6119f0565b6040516106d39190613569565b60405180910390f35b6106e4611ac1565b6040516106f19190613569565b60405180910390f35b610714600480360381019061070f91906135b0565b611ac7565b604051610722929190613a44565b60405180910390f35b610745600480360381019061074091906135b0565b611bfb565b604051610754939291906135dd565b60405180910390f35b610777600480360381019061077291906135b0565b611c25565b604051610784919061385b565b60405180910390f35b6107a760048036038101906107a291906135b0565b611d08565b6040516107b4919061385b565b60405180910390f35b6107d760048036038101906107d29190613a7b565b611deb565b6040516107e49190613569565b60405180910390f35b61080760048036038101906108029190613b36565b611f0b565b005b610823600480360381019061081e9190613b92565b611f30565b005b61082d611f7d565b60405161083a9190613569565b60405180910390f35b61085d60048036038101906108589190613c1d565b611f83565b005b610879600480360381019061087491906135b0565b61204f565b6040516108869190613983565b60405180910390f35b6108a960048036038101906108a49190613c8c565b6120f7565b6040516108b69190613569565b60405180910390f35b6108c76121dd565b6040516108d49190613569565b60405180910390f35b6108f760048036038101906108f29190613c8c565b6121e3565b6040516109049190613569565b60405180910390f35b610915612277565b604051610922919061352e565b60405180910390f35b610945600480360381019061094091906133a4565b6123b2565b6040516109529190613569565b60405180910390f35b610975600480360381019061097091906135b0565b612423565b60405161098a99989796959493929190613d2a565b60405180910390f35b61099b6124d9565b6040516109a89190613569565b60405180910390f35b6109cb60048036038101906109c691906133a4565b6124df565b6040516109d89190613569565b60405180910390f35b6109e9612566565b005b610a056004803603810190610a009190613db7565b612818565b604051610a129190613569565b60405180910390f35b610a356004803603810190610a3091906135b0565b612906565b604051610a45949392919061387d565b60405180910390f35b610a686004803603810190610a639190613e72565b612a46565b005b610a846004803603810190610a7f9190613b36565b612add565b005b610a8e612b05565b604051610a9b919061352e565b60405180910390f35b610abe6004803603810190610ab99190613b36565b612c3f565b005b610ada6004803603810190610ad591906135b0565b612c67565b604051610ae79190613eea565b60405180910390f35b610af8612cbe565b604051610b059190613569565b60405180910390f35b610b286004803603810190610b2391906135b0565b612cc4565b604051610b3894939291906136d3565b60405180910390f35b610b5b6004803603810190610b569190613b36565b612d7c565b604051610b689190613eea565b60405180910390f35b610b79612e0d565b604051610b869190613569565b60405180910390f35b610ba96004803603810190610ba49190613f05565b612e13565b604051610bb69190613569565b60405180910390f35b610bd96004803603810190610bd4919061406e565b612ed8565b604051610be69190613569565b60405180910390f35b610c096004803603810190610c0491906135b0565b61302d565b604051610c169190613983565b60405180910390f35b610c276130d5565b604051610c349190613569565b60405180910390f35b610c576004803603810190610c5291906135b0565b6130db565b604051610c669392919061413d565b60405180910390f35b6060600060025467ffffffffffffffff811115610c8f57610c8e613279565b5b604051908082528060200260200182016040528015610cc257816020015b6060815260200190600190039081610cad5790505b509050600080600090505b600254811015610dee578480519060200120600e6000838152602001908152602001600020600001604051610d02919061427e565b604051809103902003610ddb57600e60008281526020019081526020016000206001018054610d30906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c906141aa565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b5050505050838381518110610dc157610dc0614295565b5b60200260200101819052508180610dd7906142f3565b9250505b8080610de6906142f3565b915050610ccd565b508192505050919050565b60045481565b6060600060035467ffffffffffffffff811115610e1f57610e1e613279565b5b604051908082528060200260200182016040528015610e5257816020015b6060815260200190600190039081610e3d5790505b509050600080600090505b600354811015610f635784600f60008381526020019081526020016000206000015403610f4257600f60008281526020019081526020016000206001018054610ea5906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed1906141aa565b8015610f1e5780601f10610ef357610100808354040283529160200191610f1e565b820191906000526020600020905b815481529060010190602001808311610f0157829003601f168201915b5050505050838381518110610f3657610f35614295565b5b60200260200101819052505b8180610f4d906142f3565b9250508080610f5b906142f3565b915050610e5d565b508192505050919050565b60025481565b60055481565b60146020528060005260406000206000915090508060000154908060010154908060020154905083565b600080600090505b60025481101561100a578280519060200120600e6000838152602001908152602001600020600101604051610fe1919061427e565b604051809103902003610ff75780915050611010565b8080611002906142f3565b915050610fac565b50600090505b919050565b60106020528060005260406000206000915090505481565b600b602052806000526040600020600091509050806000018054611050906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461107c906141aa565b80156110c95780601f1061109e576101008083540402835291602001916110c9565b820191906000526020600020905b8154815290600101906020018083116110ac57829003601f168201915b5050505050908060010180546110de906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461110a906141aa565b80156111575780601f1061112c57610100808354040283529160200191611157565b820191906000526020600020905b81548152906001019060200180831161113a57829003601f168201915b50505050509080600201805461116c906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611198906141aa565b80156111e55780601f106111ba576101008083540402835291602001916111e5565b820191906000526020600020905b8154815290600101906020018083116111c857829003601f168201915b5050505050905083565b6060600060025467ffffffffffffffff81111561120f5761120e613279565b5b60405190808252806020026020018201604052801561124257816020015b606081526020019060019003908161122d5790505b50905060005b60025481101561132257600e60008281526020019081526020016000206001018054611273906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461129f906141aa565b80156112ec5780601f106112c1576101008083540402835291602001916112ec565b820191906000526020600020905b8154815290600101906020018083116112cf57829003601f168201915b505050505082828151811061130457611303614295565b5b6020026020010181905250808061131a906142f3565b915050611248565b508091505090565b600d6020528060005260406000206000915090508060000154908060010154905082565b6017602052806000526040600020600091509050806000015490806001015490806002015490806003018054611383906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546113af906141aa565b80156113fc5780601f106113d1576101008083540402835291602001916113fc565b820191906000526020600020905b8154815290600101906020018083116113df57829003601f168201915b5050505050905084565b600f60205280600052604060002060009150905080600001549080600101805461142f906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461145b906141aa565b80156114a85780601f1061147d576101008083540402835291602001916114a8565b820191906000526020600020905b81548152906001019060200180831161148b57829003601f168201915b5050505050908060020154905083565b60065481565b6060600060065467ffffffffffffffff8111156114de576114dd613279565b5b60405190808252806020026020018201604052801561150c5781602001602082028036833780820191505090505b509050600080600090505b6006548110156115b85785601460008381526020019081526020016000206000015414801561155b5750846014600083815260200190815260200160002060010154145b1561159757601460008281526020019081526020016000206002015483838151811061158a57611589614295565b5b6020026020010181815250505b81806115a2906142f3565b92505080806115b0906142f3565b915050611517565b50819250505092915050565b60116020528060005260406000206000915090508060000154908060010154908060020180546115f3906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461161f906141aa565b801561166c5780601f106116415761010080835404028352916020019161166c565b820191906000526020600020905b81548152906001019060200180831161164f57829003601f168201915b505050505090806003018054611681906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546116ad906141aa565b80156116fa5780601f106116cf576101008083540402835291602001916116fa565b820191906000526020600020905b8154815290600101906020018083116116dd57829003601f168201915b5050505050905084565b600015156018600085815260200190815260200160002060010160059054906101000a900460ff1615150361177357611772826040518060400160405280600581526020017f6261646765000000000000000000000000000000000000000000000000000000815250612a46565b5b6117b2816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250612a46565b60016018600085815260200190815260200160002060010160056101000a81548160ff02191690831515021790555083600f60008781526020019081526020016000206002016000828254611807919061433b565b9250508190555083601060008581526020019081526020016000206000828254611831919061433b565b925050819055506040518060600160405280868152602001848152602001858152506012600060015481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506001600081548092919061189c906142f3565b91905055505050505050565b6060600b600083815260200190815260200160002060010180546118cb906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546118f7906141aa565b80156119445780601f1061191957610100808354040283529160200191611944565b820191906000526020600020905b81548152906001019060200180831161192757829003601f168201915b50505050509050919050565b600c602052806000526040600020600091509050805461196f906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461199b906141aa565b80156119e85780601f106119bd576101008083540402835291602001916119e8565b820191906000526020600020905b8154815290600101906020018083116119cb57829003601f168201915b505050505081565b600060016018600084815260200190815260200160002060010160066101000a81548160ff021916908315150217905550604051806080016040528060075481526020018681526020018581526020018481525060156000600754815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611a82919061451b565b506060820151816003019081611a98919061451b565b5090505060076000815480929190611aaf906142f3565b91905055506007549050949350505050565b60005481565b600e602052806000526040600020600091509050806000018054611aea906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611b16906141aa565b8015611b635780601f10611b3857610100808354040283529160200191611b63565b820191906000526020600020905b815481529060010190602001808311611b4657829003601f168201915b505050505090806001018054611b78906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba4906141aa565b8015611bf15780601f10611bc657610100808354040283529160200191611bf1565b820191906000526020600020905b815481529060010190602001808311611bd457829003601f168201915b5050505050905082565b60126020528060005260406000206000915090508060000154908060010154908060020154905083565b6060600060075467ffffffffffffffff811115611c4557611c44613279565b5b604051908082528060200260200182016040528015611c735781602001602082028036833780820191505090505b509050600080600090505b600754811015611cfd5784601560008381526020019081526020016000206001015403611cea576015600082815260200190815260200160002060000154838381518110611ccf57611cce614295565b5b6020026020010181815250508180611ce6906142f3565b9250505b8080611cf5906142f3565b915050611c7e565b508192505050919050565b6060600060095467ffffffffffffffff811115611d2857611d27613279565b5b604051908082528060200260200182016040528015611d565781602001602082028036833780820191505090505b509050600080600090505b600954811015611de05784601760008381526020019081526020016000206001015403611dcd576017600082815260200190815260200160002060000154838381518110611db257611db1614295565b5b6020026020010181815250508180611dc9906142f3565b9250505b8080611dd8906142f3565b915050611d61565b508192505050919050565b600060405180606001604052808681526020018581526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600b6000805481526020019081526020016000206000820151816000019081611e66919061451b565b506020820151816001019081611e7c919061451b565b506040820151816002019081611e92919061451b565b5090505082600c6000805481526020019081526020016000209081611eb7919061451b565b5060016018600084815260200190815260200160002060010160006101000a81548160ff021916908315150217905550600080815480929190611ef9906142f3565b91905055506000549050949350505050565b80600c60008481526020019081526020016000209081611f2b919061451b565b505050565b81600b60008581526020019081526020016000206000019081611f53919061451b565b5080600b60008581526020019081526020016000206001019081611f77919061451b565b50505050565b600a5481565b60016018600084815260200190815260200160002060010160016101000a81548160ff021916908315150217905550604051806040016040528084815260200183815250600d60006004548152602001908152602001600020600082015181600001556020820151816001015590505060046000815480929190612006906142f3565b919050555061204a816040518060400160405280600481526020017f6a6f696e00000000000000000000000000000000000000000000000000000000815250612a46565b505050565b6060600f60008381526020019081526020016000206001018054612072906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461209e906141aa565b80156120eb5780601f106120c0576101008083540402835291602001916120eb565b820191906000526020600020905b8154815290600101906020018083116120ce57829003601f168201915b50505050509050919050565b600060016018600085815260200190815260200160002060010160046101000a81548160ff0219169083151502179055506040518060600160405280868152602001858152602001848152506014600060065481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506006600081548092919061218c906142f3565b91905055506121d0826040518060400160405280600481526020017f766f746500000000000000000000000000000000000000000000000000000000815250612a46565b6006549050949350505050565b60075481565b6000604051806080016040528086815260200185815260200184815260200183815250601660006008548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161224e919061451b565b5090505060086000815480929190612265906142f3565b91905055506008549050949350505050565b6060600060035467ffffffffffffffff81111561229757612296613279565b5b6040519080825280602002602001820160405280156122ca57816020015b60608152602001906001900390816122b55790505b50905060005b6003548110156123aa57600f600082815260200190815260200160002060010180546122fb906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612327906141aa565b80156123745780601f1061234957610100808354040283529160200191612374565b820191906000526020600020905b81548152906001019060200180831161235757829003601f168201915b505050505082828151811061238c5761238b614295565b5b602002602001018190525080806123a2906142f3565b9150506122d0565b508091505090565b600080600090505b600354811015612418578280519060200120600f60008381526020019081526020016000206001016040516123ef919061427e565b604051809103902003612405578091505061241e565b8080612410906142f3565b9150506123ba565b50600090505b919050565b60186020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16908060010160079054906101000a900460ff16905089565b60095481565b600080600090505b60035481101561255b578280519060200120600f600083815260200190815260200160002060010160405161251c919061427e565b60405180910390200361254857600f600082815260200190815260200160002060000154915050612561565b8080612553906142f3565b9150506124e7565b50600090505b919050565b60005b6000548110156125cc57600b60008281526020019081526020016000206000808201600061259791906131ed565b6001820160006125a791906131ed565b6002820160006125b791906131ed565b505080806125c4906142f3565b915050612569565b5060005b60025481101561262357600e6000828152602001908152602001600020600080820160006125fe91906131ed565b60018201600061260e91906131ed565b5050808061261b906142f3565b9150506125d0565b5060005b60035481101561267a57600f600082815260200190815260200160002060008082016000905560018201600061265d91906131ed565b600282016000905550508080612672906142f3565b915050612627565b5060005b6002548110156126d1576013600082815260200190815260200160002060008082016000905560018201600090556002820160006126bc91906131ed565b505080806126c9906142f3565b91505061267e565b5060005b6007548110156127385760156000828152602001908152602001600020600080820160009055600182016000905560028201600061271391906131ed565b60038201600061272391906131ed565b50508080612730906142f3565b9150506126d5565b5060005b60095481101561279757601760008281526020019081526020016000206000808201600090556001820160009055600282016000905560038201600061278291906131ed565b5050808061278f906142f3565b91505061273c565b5060005b6006548110156127e6576014600082815260200190815260200160002060008082016000905560018201600090556002820160009055505080806127de906142f3565b91505061279b565b506000808190555060006002819055506000600381905550600060078190555060006009819055506000600681905550565b6000604051806040016040528085815260200186815250600e600060025481526020019081526020016000206000820151816000019081612859919061451b565b50602082015181600101908161286f919061451b565b5090505060016018600085815260200190815260200160002060010160026101000a81548160ff021916908315150217905550600260008154809291906128b5906142f3565b91905055506128f9826040518060400160405280600481526020017f676f616c00000000000000000000000000000000000000000000000000000000815250612a46565b6002549050949350505050565b6015602052806000526040600020600091509050806000015490806001015490806002018054612935906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612961906141aa565b80156129ae5780601f10612983576101008083540402835291602001916129ae565b820191906000526020600020905b81548152906001019060200180831161299157829003601f168201915b5050505050908060030180546129c3906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546129ef906141aa565b8015612a3c5780601f10612a1157610100808354040283529160200191612a3c565b820191906000526020600020905b815481529060010190602001808311612a1f57829003601f168201915b5050505050905084565b6040518060800160405280600a5481526020014281526020018281526020018381525060116000600a54815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612aa7919061451b565b506060820151816003019081612abd919061451b565b50905050600a6000815480929190612ad4906142f3565b91905055505050565b80600f60008481526020019081526020016000206001019081612b00919061451b565b505050565b60606000805467ffffffffffffffff811115612b2457612b23613279565b5b604051908082528060200260200182016040528015612b5757816020015b6060815260200190600190039081612b425790505b50905060005b600054811015612c3757600b60008281526020019081526020016000206001018054612b88906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb4906141aa565b8015612c015780601f10612bd657610100808354040283529160200191612c01565b820191906000526020600020905b815481529060010190602001808311612be457829003601f168201915b5050505050828281518110612c1957612c18614295565b5b60200260200101819052508080612c2f906142f3565b915050612b5d565b508091505090565b80600e60008481526020019081526020016000206001019081612c62919061451b565b505050565b600080600090505b600454811015612cb35782600d60008381526020019081526020016000206001015403612ca0576001915050612cb9565b8080612cab906142f3565b915050612c6f565b50600090505b919050565b60085481565b6016602052806000526040600020600091509050806000015490806001015490806002015490806003018054612cf9906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612d25906141aa565b8015612d725780601f10612d4757610100808354040283529160200191612d72565b820191906000526020600020905b815481529060010190602001808311612d5557829003601f168201915b5050505050905084565b6000806000905060005b600854811015612e0257846016600083815260200190815260200160002060000154148015612de5575060166000828152602001908152602001600020600301604051612dd3919061427e565b60405180910390208480519060200120145b15612def57600191505b8080612dfa906142f3565b915050612d86565b508091505092915050565b60035481565b600060016018600084815260200190815260200160002060010160076101000a81548160ff02191690831515021790555060405180608001604052806009548152602001868152602001848152602001858152506017600060095481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019081612eaf919061451b565b5090505060096000815480929190612ec6906142f3565b91905055506009549050949350505050565b600060405180606001604052808681526020018781526020016000815250600f60006003548152602001908152602001600020600082015181600001556020820151816001019081612f2a919061451b565b506040820151816002015590505060016018600085815260200190815260200160002060010160036101000a81548160ff02191690831515021790555060036000815480929190612f7a906142f3565b919050555060005b8451811015612fdf57612fb4600354600554878481518110612fa757612fa6614295565b5b602002602001015161318d565b60056000815480929190612fc7906142f3565b91905055508080612fd7906142f3565b915050612f82565b5061301f826040518060400160405280600481526020017f6964656100000000000000000000000000000000000000000000000000000000815250612a46565b600354905095945050505050565b6060600e60008381526020019081526020016000206001018054613050906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461307c906141aa565b80156130c95780601f1061309e576101008083540402835291602001916130c9565b820191906000526020600020905b8154815290600101906020018083116130ac57829003601f168201915b50505050509050919050565b60015481565b601360205280600052604060002060009150905080600001549080600101549080600201805461310a906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054613136906141aa565b80156131835780601f1061315857610100808354040283529160200191613183565b820191906000526020600020905b81548152906001019060200180831161316657829003601f168201915b5050505050905083565b60405180606001604052808481526020018381526020018281525060136000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816131e4919061451b565b50905050505050565b5080546131f9906141aa565b6000825580601f1061320b575061322a565b601f016020900490600052602060002090810190613229919061322d565b5b50565b5b8082111561324657600081600090555060010161322e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132b182613268565b810181811067ffffffffffffffff821117156132d0576132cf613279565b5b80604052505050565b60006132e361324a565b90506132ef82826132a8565b919050565b600067ffffffffffffffff82111561330f5761330e613279565b5b61331882613268565b9050602081019050919050565b82818337600083830152505050565b6000613347613342846132f4565b6132d9565b90508281526020810184848401111561336357613362613263565b5b61336e848285613325565b509392505050565b600082601f83011261338b5761338a61325e565b5b813561339b848260208601613334565b91505092915050565b6000602082840312156133ba576133b9613254565b5b600082013567ffffffffffffffff8111156133d8576133d7613259565b5b6133e484828501613376565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613453578082015181840152602081019050613438565b60008484015250505050565b600061346a82613419565b6134748185613424565b9350613484818560208601613435565b61348d81613268565b840191505092915050565b60006134a4838361345f565b905092915050565b6000602082019050919050565b60006134c4826133ed565b6134ce81856133f8565b9350836020820285016134e085613409565b8060005b8581101561351c57848403895281516134fd8582613498565b9450613508836134ac565b925060208a019950506001810190506134e4565b50829750879550505050505092915050565b6000602082019050818103600083015261354881846134b9565b905092915050565b6000819050919050565b61356381613550565b82525050565b600060208201905061357e600083018461355a565b92915050565b61358d81613550565b811461359857600080fd5b50565b6000813590506135aa81613584565b92915050565b6000602082840312156135c6576135c5613254565b5b60006135d48482850161359b565b91505092915050565b60006060820190506135f2600083018661355a565b6135ff602083018561355a565b61360c604083018461355a565b949350505050565b600082825260208201905092915050565b600061363082613419565b61363a8185613614565b935061364a818560208601613435565b61365381613268565b840191505092915050565b600060608201905081810360008301526136788186613625565b9050818103602083015261368c8185613625565b905081810360408301526136a08184613625565b9050949350505050565b60006040820190506136bf600083018561355a565b6136cc602083018461355a565b9392505050565b60006080820190506136e8600083018761355a565b6136f5602083018661355a565b613702604083018561355a565b81810360608301526137148184613625565b905095945050505050565b6000606082019050613734600083018661355a565b81810360208301526137468185613625565b9050613755604083018461355a565b949350505050565b6000806040838503121561377457613773613254565b5b60006137828582860161359b565b92505060206137938582860161359b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137d281613550565b82525050565b60006137e483836137c9565b60208301905092915050565b6000602082019050919050565b60006138088261379d565b61381281856137a8565b935061381d836137b9565b8060005b8381101561384e57815161383588826137d8565b9750613840836137f0565b925050600181019050613821565b5085935050505092915050565b6000602082019050818103600083015261387581846137fd565b905092915050565b6000608082019050613892600083018761355a565b61389f602083018661355a565b81810360408301526138b18185613625565b905081810360608301526138c58184613625565b905095945050505050565b600080600080600060a086880312156138ec576138eb613254565b5b60006138fa8882890161359b565b955050602061390b8882890161359b565b945050604061391c8882890161359b565b935050606086013567ffffffffffffffff81111561393d5761393c613259565b5b61394988828901613376565b925050608086013567ffffffffffffffff81111561396a57613969613259565b5b61397688828901613376565b9150509295509295909350565b6000602082019050818103600083015261399d8184613625565b905092915050565b600080600080608085870312156139bf576139be613254565b5b60006139cd8782880161359b565b945050602085013567ffffffffffffffff8111156139ee576139ed613259565b5b6139fa87828801613376565b935050604085013567ffffffffffffffff811115613a1b57613a1a613259565b5b613a2787828801613376565b9250506060613a388782880161359b565b91505092959194509250565b60006040820190508181036000830152613a5e8185613625565b90508181036020830152613a728184613625565b90509392505050565b60008060008060808587031215613a9557613a94613254565b5b600085013567ffffffffffffffff811115613ab357613ab2613259565b5b613abf87828801613376565b945050602085013567ffffffffffffffff811115613ae057613adf613259565b5b613aec87828801613376565b935050604085013567ffffffffffffffff811115613b0d57613b0c613259565b5b613b1987828801613376565b9250506060613b2a8782880161359b565b91505092959194509250565b60008060408385031215613b4d57613b4c613254565b5b6000613b5b8582860161359b565b925050602083013567ffffffffffffffff811115613b7c57613b7b613259565b5b613b8885828601613376565b9150509250929050565b600080600060608486031215613bab57613baa613254565b5b6000613bb98682870161359b565b935050602084013567ffffffffffffffff811115613bda57613bd9613259565b5b613be686828701613376565b925050604084013567ffffffffffffffff811115613c0757613c06613259565b5b613c1386828701613376565b9150509250925092565b600080600060608486031215613c3657613c35613254565b5b6000613c448682870161359b565b9350506020613c558682870161359b565b925050604084013567ffffffffffffffff811115613c7657613c75613259565b5b613c8286828701613376565b9150509250925092565b60008060008060808587031215613ca657613ca5613254565b5b6000613cb48782880161359b565b9450506020613cc58782880161359b565b9350506040613cd68782880161359b565b925050606085013567ffffffffffffffff811115613cf757613cf6613259565b5b613d0387828801613376565b91505092959194509250565b60008115159050919050565b613d2481613d0f565b82525050565b600061012082019050613d40600083018c61355a565b613d4d602083018b613d1b565b613d5a604083018a613d1b565b613d676060830189613d1b565b613d746080830188613d1b565b613d8160a0830187613d1b565b613d8e60c0830186613d1b565b613d9b60e0830185613d1b565b613da9610100830184613d1b565b9a9950505050505050505050565b60008060008060808587031215613dd157613dd0613254565b5b600085013567ffffffffffffffff811115613def57613dee613259565b5b613dfb87828801613376565b945050602085013567ffffffffffffffff811115613e1c57613e1b613259565b5b613e2887828801613376565b9350506040613e398782880161359b565b925050606085013567ffffffffffffffff811115613e5a57613e59613259565b5b613e6687828801613376565b91505092959194509250565b60008060408385031215613e8957613e88613254565b5b600083013567ffffffffffffffff811115613ea757613ea6613259565b5b613eb385828601613376565b925050602083013567ffffffffffffffff811115613ed457613ed3613259565b5b613ee085828601613376565b9150509250929050565b6000602082019050613eff6000830184613d1b565b92915050565b60008060008060808587031215613f1f57613f1e613254565b5b6000613f2d8782880161359b565b945050602085013567ffffffffffffffff811115613f4e57613f4d613259565b5b613f5a87828801613376565b9350506040613f6b8782880161359b565b9250506060613f7c8782880161359b565b91505092959194509250565b600067ffffffffffffffff821115613fa357613fa2613279565b5b602082029050602081019050919050565b600080fd5b6000613fcc613fc784613f88565b6132d9565b90508083825260208201905060208402830185811115613fef57613fee613fb4565b5b835b8181101561403657803567ffffffffffffffff8111156140145761401361325e565b5b8086016140218982613376565b85526020850194505050602081019050613ff1565b5050509392505050565b600082601f8301126140555761405461325e565b5b8135614065848260208601613fb9565b91505092915050565b600080600080600060a0868803121561408a57614089613254565b5b600086013567ffffffffffffffff8111156140a8576140a7613259565b5b6140b488828901613376565b95505060206140c58882890161359b565b945050604086013567ffffffffffffffff8111156140e6576140e5613259565b5b6140f288828901614040565b93505060606141038882890161359b565b925050608086013567ffffffffffffffff81111561412457614123613259565b5b61413088828901613376565b9150509295509295909350565b6000606082019050614152600083018661355a565b61415f602083018561355a565b81810360408301526141718184613625565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806141c257607f821691505b6020821081036141d5576141d461417b565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614208816141aa565b61421281866141db565b9450600182166000811461422d576001811461424257614275565b60ff1983168652811515820286019350614275565b61424b856141e6565b60005b8381101561426d5781548189015260018201915060208101905061424e565b838801955050505b50505092915050565b600061428a82846141fb565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142fe82613550565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036143305761432f6142c4565b5b600182019050919050565b600061434682613550565b915061435183613550565b9250828201905080821115614369576143686142c4565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614394565b6143db8683614394565b95508019841693508086168417925050509392505050565b6000819050919050565b600061441861441361440e84613550565b6143f3565b613550565b9050919050565b6000819050919050565b614432836143fd565b61444661443e8261441f565b8484546143a1565b825550505050565b600090565b61445b61444e565b614466818484614429565b505050565b5b8181101561448a5761447f600082614453565b60018101905061446c565b5050565b601f8211156144cf576144a08161436f565b6144a984614384565b810160208510156144b8578190505b6144cc6144c485614384565b83018261446b565b50505b505050565b600082821c905092915050565b60006144f2600019846008026144d4565b1980831691505092915050565b600061450b83836144e1565b9150826002028217905092915050565b61452482613419565b67ffffffffffffffff81111561453d5761453c613279565b5b61454782546141aa565b61455282828561448e565b600060209050601f8311600181146145855760008415614573578287015190505b61457d85826144ff565b8655506145e5565b601f1984166145938661436f565b60005b828110156145bb57848901518255600182019150602085019450602081019050614596565b868310156145d857848901516145d4601f8916826144e1565b8355505b6001600288020188555050505b50505050505056fea26469706673582212203680ed0812a95bf9a7b8060236a28e1be932c53d90c22a796288dac85ba55dc664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80638ac4110c116101d3578063bda0033511610104578063cd230809116100a2578063e1b011a01161007c578063e1b011a014610bbf578063e32acc1a14610bef578063ec24580214610c1f578063ff4a37ef14610c3d57610378565b8063cd23080914610b41578063d3791b2014610b71578063d9fc52db14610b8f57610378565b8063c29595c5116100de578063c29595c514610aa4578063c7af4ee514610ac0578063ca013f1714610af0578063cace8d4614610b0e57610378565b8063bda0033514610a4e578063c04e743014610a6a578063c04fe97814610a8657610378565b8063a1ca917811610171578063aa4cdf2a1161014b578063aa4cdf2a146109b1578063b16060a6146109e1578063b39a38bd146109eb578063b527d45e14610a1b57610378565b8063a1ca91781461092b578063a428a47f1461095b578063aa2bf5d31461099357610378565b80638d6b30a1116101ad5780638d6b30a11461088f5780639077007d146108bf578063934c5f00146108dd57806397ee76061461090d57610378565b80638ac4110c146108255780638c70034a146108435780638d3d25951461085f57610378565b80634be7adb5116102ad5780637f2035d41161024b578063812fae1f11610225578063812fae1f1461078d57806386ffa45b146107bd57806387633eb2146107ed578063881de8581461080957610378565b80637f2035d4146106fa5780637fc543ec1461072b578063803f5b9f1461075d57610378565b80635d907da1116102875780635d907da11461064c5780636ecda4ee1461067c578063787f19c7146106ac5780637bbd582d146106dc57610378565b80634be7adb5146105cd57806354a9fb18146105fd5780635996278f1461063057610378565b806320959ed01161031a578063330b8f26116102f4578063330b8f26146105195780633f87a2f41461054a578063468d0c801461057d5780634a797bd7146105af57610378565b806320959ed01461049957806327a568b9146104c957806329b56f60146104fb57610378565b806313bf4cea1161035657806313bf4cea146103fb5780631b592aeb146104195780631ba44c4c146104375780631e9ac9f51461046957610378565b80630377d44a1461037d5780631171b621146103ad578063131d44f2146103cb575b600080fd5b610397600480360381019061039291906133a4565b610c6f565b6040516103a4919061352e565b60405180910390f35b6103b5610df9565b6040516103c29190613569565b60405180910390f35b6103e560048036038101906103e091906135b0565b610dff565b6040516103f2919061352e565b60405180910390f35b610403610f6e565b6040516104109190613569565b60405180910390f35b610421610f74565b60405161042e9190613569565b60405180910390f35b610451600480360381019061044c91906135b0565b610f7a565b604051610460939291906135dd565b60405180910390f35b610483600480360381019061047e91906133a4565b610fa4565b6040516104909190613569565b60405180910390f35b6104b360048036038101906104ae91906135b0565b611015565b6040516104c09190613569565b60405180910390f35b6104e360048036038101906104de91906135b0565b61102d565b6040516104f29392919061365e565b60405180910390f35b6105036111ef565b604051610510919061352e565b60405180910390f35b610533600480360381019061052e91906135b0565b61132a565b6040516105419291906136aa565b60405180910390f35b610564600480360381019061055f91906135b0565b61134e565b60405161057494939291906136d3565b60405180910390f35b610597600480360381019061059291906135b0565b611406565b6040516105a69392919061371f565b60405180910390f35b6105b76114b8565b6040516105c49190613569565b60405180910390f35b6105e760048036038101906105e2919061375d565b6114be565b6040516105f4919061385b565b60405180910390f35b610617600480360381019061061291906135b0565b6115c4565b604051610627949392919061387d565b60405180910390f35b61064a600480360381019061064591906138d0565b611704565b005b610666600480360381019061066191906135b0565b6118a8565b6040516106739190613983565b60405180910390f35b610696600480360381019061069191906135b0565b611950565b6040516106a39190613983565b60405180910390f35b6106c660048036038101906106c191906139a5565b6119f0565b6040516106d39190613569565b60405180910390f35b6106e4611ac1565b6040516106f19190613569565b60405180910390f35b610714600480360381019061070f91906135b0565b611ac7565b604051610722929190613a44565b60405180910390f35b610745600480360381019061074091906135b0565b611bfb565b604051610754939291906135dd565b60405180910390f35b610777600480360381019061077291906135b0565b611c25565b604051610784919061385b565b60405180910390f35b6107a760048036038101906107a291906135b0565b611d08565b6040516107b4919061385b565b60405180910390f35b6107d760048036038101906107d29190613a7b565b611deb565b6040516107e49190613569565b60405180910390f35b61080760048036038101906108029190613b36565b611f0b565b005b610823600480360381019061081e9190613b92565b611f30565b005b61082d611f7d565b60405161083a9190613569565b60405180910390f35b61085d60048036038101906108589190613c1d565b611f83565b005b610879600480360381019061087491906135b0565b61204f565b6040516108869190613983565b60405180910390f35b6108a960048036038101906108a49190613c8c565b6120f7565b6040516108b69190613569565b60405180910390f35b6108c76121dd565b6040516108d49190613569565b60405180910390f35b6108f760048036038101906108f29190613c8c565b6121e3565b6040516109049190613569565b60405180910390f35b610915612277565b604051610922919061352e565b60405180910390f35b610945600480360381019061094091906133a4565b6123b2565b6040516109529190613569565b60405180910390f35b610975600480360381019061097091906135b0565b612423565b60405161098a99989796959493929190613d2a565b60405180910390f35b61099b6124d9565b6040516109a89190613569565b60405180910390f35b6109cb60048036038101906109c691906133a4565b6124df565b6040516109d89190613569565b60405180910390f35b6109e9612566565b005b610a056004803603810190610a009190613db7565b612818565b604051610a129190613569565b60405180910390f35b610a356004803603810190610a3091906135b0565b612906565b604051610a45949392919061387d565b60405180910390f35b610a686004803603810190610a639190613e72565b612a46565b005b610a846004803603810190610a7f9190613b36565b612add565b005b610a8e612b05565b604051610a9b919061352e565b60405180910390f35b610abe6004803603810190610ab99190613b36565b612c3f565b005b610ada6004803603810190610ad591906135b0565b612c67565b604051610ae79190613eea565b60405180910390f35b610af8612cbe565b604051610b059190613569565b60405180910390f35b610b286004803603810190610b2391906135b0565b612cc4565b604051610b3894939291906136d3565b60405180910390f35b610b5b6004803603810190610b569190613b36565b612d7c565b604051610b689190613eea565b60405180910390f35b610b79612e0d565b604051610b869190613569565b60405180910390f35b610ba96004803603810190610ba49190613f05565b612e13565b604051610bb69190613569565b60405180910390f35b610bd96004803603810190610bd4919061406e565b612ed8565b604051610be69190613569565b60405180910390f35b610c096004803603810190610c0491906135b0565b61302d565b604051610c169190613983565b60405180910390f35b610c276130d5565b604051610c349190613569565b60405180910390f35b610c576004803603810190610c5291906135b0565b6130db565b604051610c669392919061413d565b60405180910390f35b6060600060025467ffffffffffffffff811115610c8f57610c8e613279565b5b604051908082528060200260200182016040528015610cc257816020015b6060815260200190600190039081610cad5790505b509050600080600090505b600254811015610dee578480519060200120600e6000838152602001908152602001600020600001604051610d02919061427e565b604051809103902003610ddb57600e60008281526020019081526020016000206001018054610d30906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c906141aa565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b5050505050838381518110610dc157610dc0614295565b5b60200260200101819052508180610dd7906142f3565b9250505b8080610de6906142f3565b915050610ccd565b508192505050919050565b60045481565b6060600060035467ffffffffffffffff811115610e1f57610e1e613279565b5b604051908082528060200260200182016040528015610e5257816020015b6060815260200190600190039081610e3d5790505b509050600080600090505b600354811015610f635784600f60008381526020019081526020016000206000015403610f4257600f60008281526020019081526020016000206001018054610ea5906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed1906141aa565b8015610f1e5780601f10610ef357610100808354040283529160200191610f1e565b820191906000526020600020905b815481529060010190602001808311610f0157829003601f168201915b5050505050838381518110610f3657610f35614295565b5b60200260200101819052505b8180610f4d906142f3565b9250508080610f5b906142f3565b915050610e5d565b508192505050919050565b60025481565b60055481565b60146020528060005260406000206000915090508060000154908060010154908060020154905083565b600080600090505b60025481101561100a578280519060200120600e6000838152602001908152602001600020600101604051610fe1919061427e565b604051809103902003610ff75780915050611010565b8080611002906142f3565b915050610fac565b50600090505b919050565b60106020528060005260406000206000915090505481565b600b602052806000526040600020600091509050806000018054611050906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461107c906141aa565b80156110c95780601f1061109e576101008083540402835291602001916110c9565b820191906000526020600020905b8154815290600101906020018083116110ac57829003601f168201915b5050505050908060010180546110de906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461110a906141aa565b80156111575780601f1061112c57610100808354040283529160200191611157565b820191906000526020600020905b81548152906001019060200180831161113a57829003601f168201915b50505050509080600201805461116c906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611198906141aa565b80156111e55780601f106111ba576101008083540402835291602001916111e5565b820191906000526020600020905b8154815290600101906020018083116111c857829003601f168201915b5050505050905083565b6060600060025467ffffffffffffffff81111561120f5761120e613279565b5b60405190808252806020026020018201604052801561124257816020015b606081526020019060019003908161122d5790505b50905060005b60025481101561132257600e60008281526020019081526020016000206001018054611273906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461129f906141aa565b80156112ec5780601f106112c1576101008083540402835291602001916112ec565b820191906000526020600020905b8154815290600101906020018083116112cf57829003601f168201915b505050505082828151811061130457611303614295565b5b6020026020010181905250808061131a906142f3565b915050611248565b508091505090565b600d6020528060005260406000206000915090508060000154908060010154905082565b6017602052806000526040600020600091509050806000015490806001015490806002015490806003018054611383906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546113af906141aa565b80156113fc5780601f106113d1576101008083540402835291602001916113fc565b820191906000526020600020905b8154815290600101906020018083116113df57829003601f168201915b5050505050905084565b600f60205280600052604060002060009150905080600001549080600101805461142f906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461145b906141aa565b80156114a85780601f1061147d576101008083540402835291602001916114a8565b820191906000526020600020905b81548152906001019060200180831161148b57829003601f168201915b5050505050908060020154905083565b60065481565b6060600060065467ffffffffffffffff8111156114de576114dd613279565b5b60405190808252806020026020018201604052801561150c5781602001602082028036833780820191505090505b509050600080600090505b6006548110156115b85785601460008381526020019081526020016000206000015414801561155b5750846014600083815260200190815260200160002060010154145b1561159757601460008281526020019081526020016000206002015483838151811061158a57611589614295565b5b6020026020010181815250505b81806115a2906142f3565b92505080806115b0906142f3565b915050611517565b50819250505092915050565b60116020528060005260406000206000915090508060000154908060010154908060020180546115f3906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461161f906141aa565b801561166c5780601f106116415761010080835404028352916020019161166c565b820191906000526020600020905b81548152906001019060200180831161164f57829003601f168201915b505050505090806003018054611681906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546116ad906141aa565b80156116fa5780601f106116cf576101008083540402835291602001916116fa565b820191906000526020600020905b8154815290600101906020018083116116dd57829003601f168201915b5050505050905084565b600015156018600085815260200190815260200160002060010160059054906101000a900460ff1615150361177357611772826040518060400160405280600581526020017f6261646765000000000000000000000000000000000000000000000000000000815250612a46565b5b6117b2816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250612a46565b60016018600085815260200190815260200160002060010160056101000a81548160ff02191690831515021790555083600f60008781526020019081526020016000206002016000828254611807919061433b565b9250508190555083601060008581526020019081526020016000206000828254611831919061433b565b925050819055506040518060600160405280868152602001848152602001858152506012600060015481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506001600081548092919061189c906142f3565b91905055505050505050565b6060600b600083815260200190815260200160002060010180546118cb906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546118f7906141aa565b80156119445780601f1061191957610100808354040283529160200191611944565b820191906000526020600020905b81548152906001019060200180831161192757829003601f168201915b50505050509050919050565b600c602052806000526040600020600091509050805461196f906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461199b906141aa565b80156119e85780601f106119bd576101008083540402835291602001916119e8565b820191906000526020600020905b8154815290600101906020018083116119cb57829003601f168201915b505050505081565b600060016018600084815260200190815260200160002060010160066101000a81548160ff021916908315150217905550604051806080016040528060075481526020018681526020018581526020018481525060156000600754815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611a82919061451b565b506060820151816003019081611a98919061451b565b5090505060076000815480929190611aaf906142f3565b91905055506007549050949350505050565b60005481565b600e602052806000526040600020600091509050806000018054611aea906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611b16906141aa565b8015611b635780601f10611b3857610100808354040283529160200191611b63565b820191906000526020600020905b815481529060010190602001808311611b4657829003601f168201915b505050505090806001018054611b78906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba4906141aa565b8015611bf15780601f10611bc657610100808354040283529160200191611bf1565b820191906000526020600020905b815481529060010190602001808311611bd457829003601f168201915b5050505050905082565b60126020528060005260406000206000915090508060000154908060010154908060020154905083565b6060600060075467ffffffffffffffff811115611c4557611c44613279565b5b604051908082528060200260200182016040528015611c735781602001602082028036833780820191505090505b509050600080600090505b600754811015611cfd5784601560008381526020019081526020016000206001015403611cea576015600082815260200190815260200160002060000154838381518110611ccf57611cce614295565b5b6020026020010181815250508180611ce6906142f3565b9250505b8080611cf5906142f3565b915050611c7e565b508192505050919050565b6060600060095467ffffffffffffffff811115611d2857611d27613279565b5b604051908082528060200260200182016040528015611d565781602001602082028036833780820191505090505b509050600080600090505b600954811015611de05784601760008381526020019081526020016000206001015403611dcd576017600082815260200190815260200160002060000154838381518110611db257611db1614295565b5b6020026020010181815250508180611dc9906142f3565b9250505b8080611dd8906142f3565b915050611d61565b508192505050919050565b600060405180606001604052808681526020018581526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600b6000805481526020019081526020016000206000820151816000019081611e66919061451b565b506020820151816001019081611e7c919061451b565b506040820151816002019081611e92919061451b565b5090505082600c6000805481526020019081526020016000209081611eb7919061451b565b5060016018600084815260200190815260200160002060010160006101000a81548160ff021916908315150217905550600080815480929190611ef9906142f3565b91905055506000549050949350505050565b80600c60008481526020019081526020016000209081611f2b919061451b565b505050565b81600b60008581526020019081526020016000206000019081611f53919061451b565b5080600b60008581526020019081526020016000206001019081611f77919061451b565b50505050565b600a5481565b60016018600084815260200190815260200160002060010160016101000a81548160ff021916908315150217905550604051806040016040528084815260200183815250600d60006004548152602001908152602001600020600082015181600001556020820151816001015590505060046000815480929190612006906142f3565b919050555061204a816040518060400160405280600481526020017f6a6f696e00000000000000000000000000000000000000000000000000000000815250612a46565b505050565b6060600f60008381526020019081526020016000206001018054612072906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461209e906141aa565b80156120eb5780601f106120c0576101008083540402835291602001916120eb565b820191906000526020600020905b8154815290600101906020018083116120ce57829003601f168201915b50505050509050919050565b600060016018600085815260200190815260200160002060010160046101000a81548160ff0219169083151502179055506040518060600160405280868152602001858152602001848152506014600060065481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506006600081548092919061218c906142f3565b91905055506121d0826040518060400160405280600481526020017f766f746500000000000000000000000000000000000000000000000000000000815250612a46565b6006549050949350505050565b60075481565b6000604051806080016040528086815260200185815260200184815260200183815250601660006008548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161224e919061451b565b5090505060086000815480929190612265906142f3565b91905055506008549050949350505050565b6060600060035467ffffffffffffffff81111561229757612296613279565b5b6040519080825280602002602001820160405280156122ca57816020015b60608152602001906001900390816122b55790505b50905060005b6003548110156123aa57600f600082815260200190815260200160002060010180546122fb906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612327906141aa565b80156123745780601f1061234957610100808354040283529160200191612374565b820191906000526020600020905b81548152906001019060200180831161235757829003601f168201915b505050505082828151811061238c5761238b614295565b5b602002602001018190525080806123a2906142f3565b9150506122d0565b508091505090565b600080600090505b600354811015612418578280519060200120600f60008381526020019081526020016000206001016040516123ef919061427e565b604051809103902003612405578091505061241e565b8080612410906142f3565b9150506123ba565b50600090505b919050565b60186020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16908060010160079054906101000a900460ff16905089565b60095481565b600080600090505b60035481101561255b578280519060200120600f600083815260200190815260200160002060010160405161251c919061427e565b60405180910390200361254857600f600082815260200190815260200160002060000154915050612561565b8080612553906142f3565b9150506124e7565b50600090505b919050565b60005b6000548110156125cc57600b60008281526020019081526020016000206000808201600061259791906131ed565b6001820160006125a791906131ed565b6002820160006125b791906131ed565b505080806125c4906142f3565b915050612569565b5060005b60025481101561262357600e6000828152602001908152602001600020600080820160006125fe91906131ed565b60018201600061260e91906131ed565b5050808061261b906142f3565b9150506125d0565b5060005b60035481101561267a57600f600082815260200190815260200160002060008082016000905560018201600061265d91906131ed565b600282016000905550508080612672906142f3565b915050612627565b5060005b6002548110156126d1576013600082815260200190815260200160002060008082016000905560018201600090556002820160006126bc91906131ed565b505080806126c9906142f3565b91505061267e565b5060005b6007548110156127385760156000828152602001908152602001600020600080820160009055600182016000905560028201600061271391906131ed565b60038201600061272391906131ed565b50508080612730906142f3565b9150506126d5565b5060005b60095481101561279757601760008281526020019081526020016000206000808201600090556001820160009055600282016000905560038201600061278291906131ed565b5050808061278f906142f3565b91505061273c565b5060005b6006548110156127e6576014600082815260200190815260200160002060008082016000905560018201600090556002820160009055505080806127de906142f3565b91505061279b565b506000808190555060006002819055506000600381905550600060078190555060006009819055506000600681905550565b6000604051806040016040528085815260200186815250600e600060025481526020019081526020016000206000820151816000019081612859919061451b565b50602082015181600101908161286f919061451b565b5090505060016018600085815260200190815260200160002060010160026101000a81548160ff021916908315150217905550600260008154809291906128b5906142f3565b91905055506128f9826040518060400160405280600481526020017f676f616c00000000000000000000000000000000000000000000000000000000815250612a46565b6002549050949350505050565b6015602052806000526040600020600091509050806000015490806001015490806002018054612935906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612961906141aa565b80156129ae5780601f10612983576101008083540402835291602001916129ae565b820191906000526020600020905b81548152906001019060200180831161299157829003601f168201915b5050505050908060030180546129c3906141aa565b80601f01602080910402602001604051908101604052809291908181526020018280546129ef906141aa565b8015612a3c5780601f10612a1157610100808354040283529160200191612a3c565b820191906000526020600020905b815481529060010190602001808311612a1f57829003601f168201915b5050505050905084565b6040518060800160405280600a5481526020014281526020018281526020018381525060116000600a54815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612aa7919061451b565b506060820151816003019081612abd919061451b565b50905050600a6000815480929190612ad4906142f3565b91905055505050565b80600f60008481526020019081526020016000206001019081612b00919061451b565b505050565b60606000805467ffffffffffffffff811115612b2457612b23613279565b5b604051908082528060200260200182016040528015612b5757816020015b6060815260200190600190039081612b425790505b50905060005b600054811015612c3757600b60008281526020019081526020016000206001018054612b88906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb4906141aa565b8015612c015780601f10612bd657610100808354040283529160200191612c01565b820191906000526020600020905b815481529060010190602001808311612be457829003601f168201915b5050505050828281518110612c1957612c18614295565b5b60200260200101819052508080612c2f906142f3565b915050612b5d565b508091505090565b80600e60008481526020019081526020016000206001019081612c62919061451b565b505050565b600080600090505b600454811015612cb35782600d60008381526020019081526020016000206001015403612ca0576001915050612cb9565b8080612cab906142f3565b915050612c6f565b50600090505b919050565b60085481565b6016602052806000526040600020600091509050806000015490806001015490806002015490806003018054612cf9906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054612d25906141aa565b8015612d725780601f10612d4757610100808354040283529160200191612d72565b820191906000526020600020905b815481529060010190602001808311612d5557829003601f168201915b5050505050905084565b6000806000905060005b600854811015612e0257846016600083815260200190815260200160002060000154148015612de5575060166000828152602001908152602001600020600301604051612dd3919061427e565b60405180910390208480519060200120145b15612def57600191505b8080612dfa906142f3565b915050612d86565b508091505092915050565b60035481565b600060016018600084815260200190815260200160002060010160076101000a81548160ff02191690831515021790555060405180608001604052806009548152602001868152602001848152602001858152506017600060095481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019081612eaf919061451b565b5090505060096000815480929190612ec6906142f3565b91905055506009549050949350505050565b600060405180606001604052808681526020018781526020016000815250600f60006003548152602001908152602001600020600082015181600001556020820151816001019081612f2a919061451b565b506040820151816002015590505060016018600085815260200190815260200160002060010160036101000a81548160ff02191690831515021790555060036000815480929190612f7a906142f3565b919050555060005b8451811015612fdf57612fb4600354600554878481518110612fa757612fa6614295565b5b602002602001015161318d565b60056000815480929190612fc7906142f3565b91905055508080612fd7906142f3565b915050612f82565b5061301f826040518060400160405280600481526020017f6964656100000000000000000000000000000000000000000000000000000000815250612a46565b600354905095945050505050565b6060600e60008381526020019081526020016000206001018054613050906141aa565b80601f016020809104026020016040519081016040528092919081815260200182805461307c906141aa565b80156130c95780601f1061309e576101008083540402835291602001916130c9565b820191906000526020600020905b8154815290600101906020018083116130ac57829003601f168201915b50505050509050919050565b60015481565b601360205280600052604060002060009150905080600001549080600101549080600201805461310a906141aa565b80601f0160208091040260200160405190810160405280929190818152602001828054613136906141aa565b80156131835780601f1061315857610100808354040283529160200191613183565b820191906000526020600020905b81548152906001019060200180831161316657829003601f168201915b5050505050905083565b60405180606001604052808481526020018381526020018281525060136000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816131e4919061451b565b50905050505050565b5080546131f9906141aa565b6000825580601f1061320b575061322a565b601f016020900490600052602060002090810190613229919061322d565b5b50565b5b8082111561324657600081600090555060010161322e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132b182613268565b810181811067ffffffffffffffff821117156132d0576132cf613279565b5b80604052505050565b60006132e361324a565b90506132ef82826132a8565b919050565b600067ffffffffffffffff82111561330f5761330e613279565b5b61331882613268565b9050602081019050919050565b82818337600083830152505050565b6000613347613342846132f4565b6132d9565b90508281526020810184848401111561336357613362613263565b5b61336e848285613325565b509392505050565b600082601f83011261338b5761338a61325e565b5b813561339b848260208601613334565b91505092915050565b6000602082840312156133ba576133b9613254565b5b600082013567ffffffffffffffff8111156133d8576133d7613259565b5b6133e484828501613376565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613453578082015181840152602081019050613438565b60008484015250505050565b600061346a82613419565b6134748185613424565b9350613484818560208601613435565b61348d81613268565b840191505092915050565b60006134a4838361345f565b905092915050565b6000602082019050919050565b60006134c4826133ed565b6134ce81856133f8565b9350836020820285016134e085613409565b8060005b8581101561351c57848403895281516134fd8582613498565b9450613508836134ac565b925060208a019950506001810190506134e4565b50829750879550505050505092915050565b6000602082019050818103600083015261354881846134b9565b905092915050565b6000819050919050565b61356381613550565b82525050565b600060208201905061357e600083018461355a565b92915050565b61358d81613550565b811461359857600080fd5b50565b6000813590506135aa81613584565b92915050565b6000602082840312156135c6576135c5613254565b5b60006135d48482850161359b565b91505092915050565b60006060820190506135f2600083018661355a565b6135ff602083018561355a565b61360c604083018461355a565b949350505050565b600082825260208201905092915050565b600061363082613419565b61363a8185613614565b935061364a818560208601613435565b61365381613268565b840191505092915050565b600060608201905081810360008301526136788186613625565b9050818103602083015261368c8185613625565b905081810360408301526136a08184613625565b9050949350505050565b60006040820190506136bf600083018561355a565b6136cc602083018461355a565b9392505050565b60006080820190506136e8600083018761355a565b6136f5602083018661355a565b613702604083018561355a565b81810360608301526137148184613625565b905095945050505050565b6000606082019050613734600083018661355a565b81810360208301526137468185613625565b9050613755604083018461355a565b949350505050565b6000806040838503121561377457613773613254565b5b60006137828582860161359b565b92505060206137938582860161359b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137d281613550565b82525050565b60006137e483836137c9565b60208301905092915050565b6000602082019050919050565b60006138088261379d565b61381281856137a8565b935061381d836137b9565b8060005b8381101561384e57815161383588826137d8565b9750613840836137f0565b925050600181019050613821565b5085935050505092915050565b6000602082019050818103600083015261387581846137fd565b905092915050565b6000608082019050613892600083018761355a565b61389f602083018661355a565b81810360408301526138b18185613625565b905081810360608301526138c58184613625565b905095945050505050565b600080600080600060a086880312156138ec576138eb613254565b5b60006138fa8882890161359b565b955050602061390b8882890161359b565b945050604061391c8882890161359b565b935050606086013567ffffffffffffffff81111561393d5761393c613259565b5b61394988828901613376565b925050608086013567ffffffffffffffff81111561396a57613969613259565b5b61397688828901613376565b9150509295509295909350565b6000602082019050818103600083015261399d8184613625565b905092915050565b600080600080608085870312156139bf576139be613254565b5b60006139cd8782880161359b565b945050602085013567ffffffffffffffff8111156139ee576139ed613259565b5b6139fa87828801613376565b935050604085013567ffffffffffffffff811115613a1b57613a1a613259565b5b613a2787828801613376565b9250506060613a388782880161359b565b91505092959194509250565b60006040820190508181036000830152613a5e8185613625565b90508181036020830152613a728184613625565b90509392505050565b60008060008060808587031215613a9557613a94613254565b5b600085013567ffffffffffffffff811115613ab357613ab2613259565b5b613abf87828801613376565b945050602085013567ffffffffffffffff811115613ae057613adf613259565b5b613aec87828801613376565b935050604085013567ffffffffffffffff811115613b0d57613b0c613259565b5b613b1987828801613376565b9250506060613b2a8782880161359b565b91505092959194509250565b60008060408385031215613b4d57613b4c613254565b5b6000613b5b8582860161359b565b925050602083013567ffffffffffffffff811115613b7c57613b7b613259565b5b613b8885828601613376565b9150509250929050565b600080600060608486031215613bab57613baa613254565b5b6000613bb98682870161359b565b935050602084013567ffffffffffffffff811115613bda57613bd9613259565b5b613be686828701613376565b925050604084013567ffffffffffffffff811115613c0757613c06613259565b5b613c1386828701613376565b9150509250925092565b600080600060608486031215613c3657613c35613254565b5b6000613c448682870161359b565b9350506020613c558682870161359b565b925050604084013567ffffffffffffffff811115613c7657613c75613259565b5b613c8286828701613376565b9150509250925092565b60008060008060808587031215613ca657613ca5613254565b5b6000613cb48782880161359b565b9450506020613cc58782880161359b565b9350506040613cd68782880161359b565b925050606085013567ffffffffffffffff811115613cf757613cf6613259565b5b613d0387828801613376565b91505092959194509250565b60008115159050919050565b613d2481613d0f565b82525050565b600061012082019050613d40600083018c61355a565b613d4d602083018b613d1b565b613d5a604083018a613d1b565b613d676060830189613d1b565b613d746080830188613d1b565b613d8160a0830187613d1b565b613d8e60c0830186613d1b565b613d9b60e0830185613d1b565b613da9610100830184613d1b565b9a9950505050505050505050565b60008060008060808587031215613dd157613dd0613254565b5b600085013567ffffffffffffffff811115613def57613dee613259565b5b613dfb87828801613376565b945050602085013567ffffffffffffffff811115613e1c57613e1b613259565b5b613e2887828801613376565b9350506040613e398782880161359b565b925050606085013567ffffffffffffffff811115613e5a57613e59613259565b5b613e6687828801613376565b91505092959194509250565b60008060408385031215613e8957613e88613254565b5b600083013567ffffffffffffffff811115613ea757613ea6613259565b5b613eb385828601613376565b925050602083013567ffffffffffffffff811115613ed457613ed3613259565b5b613ee085828601613376565b9150509250929050565b6000602082019050613eff6000830184613d1b565b92915050565b60008060008060808587031215613f1f57613f1e613254565b5b6000613f2d8782880161359b565b945050602085013567ffffffffffffffff811115613f4e57613f4d613259565b5b613f5a87828801613376565b9350506040613f6b8782880161359b565b9250506060613f7c8782880161359b565b91505092959194509250565b600067ffffffffffffffff821115613fa357613fa2613279565b5b602082029050602081019050919050565b600080fd5b6000613fcc613fc784613f88565b6132d9565b90508083825260208201905060208402830185811115613fef57613fee613fb4565b5b835b8181101561403657803567ffffffffffffffff8111156140145761401361325e565b5b8086016140218982613376565b85526020850194505050602081019050613ff1565b5050509392505050565b600082601f8301126140555761405461325e565b5b8135614065848260208601613fb9565b91505092915050565b600080600080600060a0868803121561408a57614089613254565b5b600086013567ffffffffffffffff8111156140a8576140a7613259565b5b6140b488828901613376565b95505060206140c58882890161359b565b945050604086013567ffffffffffffffff8111156140e6576140e5613259565b5b6140f288828901614040565b93505060606141038882890161359b565b925050608086013567ffffffffffffffff81111561412457614123613259565b5b61413088828901613376565b9150509295509295909350565b6000606082019050614152600083018661355a565b61415f602083018561355a565b81810360408301526141718184613625565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806141c257607f821691505b6020821081036141d5576141d461417b565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614208816141aa565b61421281866141db565b9450600182166000811461422d576001811461424257614275565b60ff1983168652811515820286019350614275565b61424b856141e6565b60005b8381101561426d5781548189015260018201915060208101905061424e565b838801955050505b50505092915050565b600061428a82846141fb565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142fe82613550565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036143305761432f6142c4565b5b600182019050919050565b600061434682613550565b915061435183613550565b9250828201905080821115614369576143686142c4565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614394565b6143db8683614394565b95508019841693508086168417925050509392505050565b6000819050919050565b600061441861441361440e84613550565b6143f3565b613550565b9050919050565b6000819050919050565b614432836143fd565b61444661443e8261441f565b8484546143a1565b825550505050565b600090565b61445b61444e565b614466818484614429565b505050565b5b8181101561448a5761447f600082614453565b60018101905061446c565b5050565b601f8211156144cf576144a08161436f565b6144a984614384565b810160208510156144b8578190505b6144cc6144c485614384565b83018261446b565b50505b505050565b600082821c905092915050565b60006144f2600019846008026144d4565b1980831691505092915050565b600061450b83836144e1565b9150826002028217905092915050565b61452482613419565b67ffffffffffffffff81111561453d5761453c613279565b5b61454782546141aa565b61455282828561448e565b600060209050601f8311600181146145855760008415614573578287015190505b61457d85826144ff565b8655506145e5565b601f1984166145938661436f565b60005b828110156145bb57848901518255600182019150602085019450602081019050614596565b868310156145d857848901516145d4601f8916826144e1565b8355505b6001600288020188555050505b50505050505056fea26469706673582212203680ed0812a95bf9a7b8060236a28e1be932c53d90c22a796288dac85ba55dc664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2431,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2433,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donations_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2435,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2437,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2439,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_join_ids",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2441,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_smart_contract_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2443,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2445,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_message_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2447,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_message_read_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2449,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_reply_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2451,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_feed_ids",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2456,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)2331_storage)"
      },
      {
        "astId": 2460,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_template_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2465,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_joined_person",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(join_struct)2401_storage)"
      },
      {
        "astId": 2470,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)2336_storage)"
      },
      {
        "astId": 2475,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)2343_storage)"
      },
      {
        "astId": 2479,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donated",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2484,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_feeds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(feed_struct)2429_storage)"
      },
      {
        "astId": 2489,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_donations",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(donation_struct)2350_storage)"
      },
      {
        "astId": 2494,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_smart_contracts_uris",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)2357_storage)"
      },
      {
        "astId": 2499,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2364_storage)"
      },
      {
        "astId": 2504,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_messages",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(message_struct)2373_storage)"
      },
      {
        "astId": 2509,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_read_messages",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_struct(message_read_struct)2382_storage)"
      },
      {
        "astId": 2514,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "all_replies",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(reply_struct)2391_storage)"
      },
      {
        "astId": 2519,
        "contract": "contracts/PlanetDAO.sol:PlanetDAO",
        "label": "_user_badges",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(user_badge_struct)2420_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)2331_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)2331_storage"
      },
      "t_mapping(t_uint256,t_struct(donation_struct)2350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.donation_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(donation_struct)2350_storage"
      },
      "t_mapping(t_uint256,t_struct(feed_struct)2429_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.feed_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(feed_struct)2429_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)2364_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)2364_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)2336_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)2336_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)2343_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)2343_storage"
      },
      "t_mapping(t_uint256,t_struct(join_struct)2401_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.join_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(join_struct)2401_storage"
      },
      "t_mapping(t_uint256,t_struct(message_read_struct)2382_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.message_read_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_read_struct)2382_storage"
      },
      "t_mapping(t_uint256,t_struct(message_struct)2373_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.message_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_struct)2373_storage"
      },
      "t_mapping(t_uint256,t_struct(reply_struct)2391_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.reply_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(reply_struct)2391_storage"
      },
      "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)2357_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.smart_contract_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(smart_contract_uri_struct)2357_storage"
      },
      "t_mapping(t_uint256,t_struct(user_badge_struct)2420_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlanetDAO.user_badge_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(user_badge_struct)2420_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)2331_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.dao_uri_struct",
        "members": [
          {
            "astId": 2326,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2328,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2330,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(donation_struct)2350_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.donation_struct",
        "members": [
          {
            "astId": 2345,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2347,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "userid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2349,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(feed_struct)2429_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.feed_struct",
        "members": [
          {
            "astId": 2422,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "feed_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2424,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2426,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "Type",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2428,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(goal_ideas_votes_struct)2364_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 2359,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2361,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2363,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)2336_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.goal_uri_struct",
        "members": [
          {
            "astId": 2333,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2335,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)2343_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 2338,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2340,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2342,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(join_struct)2401_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.join_struct",
        "members": [
          {
            "astId": 2398,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "daoid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2400,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(message_read_struct)2382_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.message_read_struct",
        "members": [
          {
            "astId": 2375,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2377,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2379,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2381,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "msg_type",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(message_struct)2373_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.message_struct",
        "members": [
          {
            "astId": 2366,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2368,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2370,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2372,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(reply_struct)2391_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.reply_struct",
        "members": [
          {
            "astId": 2384,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "reply_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2386,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2388,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2390,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "message",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(smart_contract_uri_struct)2357_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.smart_contract_uri_struct",
        "members": [
          {
            "astId": 2352,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "smart_contract_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2354,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2356,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "smart_contract_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(user_badge_struct)2420_storage": {
        "encoding": "inplace",
        "label": "struct PlanetDAO.user_badge_struct",
        "members": [
          {
            "astId": 2403,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2405,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "dao",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2407,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "joined",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2409,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "goal",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2411,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "ideas",
            "offset": 3,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2413,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "vote",
            "offset": 4,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2415,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "donation",
            "offset": 5,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2417,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "comment",
            "offset": 6,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2419,
            "contract": "contracts/PlanetDAO.sol:PlanetDAO",
            "label": "reply",
            "offset": 7,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}